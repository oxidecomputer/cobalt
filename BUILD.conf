# -*- python -*- vim:syntax=python:

plugin_path('tools/site_cobble', 'vnd/cobble/src/cobble/target')

install('bluespec')
install('bsv_fpga_version')
install('rdl_plugin')
install('c')
install('nextpnr')
install('shell')
install('yosys')

environment('default', contents = {
    'bsc': VARS.get('bluespec', 'bin', default='bsc'),
    'bsc_flags': [
        '-q',
        '-show-range-conflict',
    ],
    'bluescan': ROOT + '/tools/site_cobble/bluescan.py',
    'bluescan_flags': [
        '--bs-prefix ' + VARS.get('bluespec', 'prefix', default='/usr/local/bluespec')
    ],
    'yosys': VARS.get('yosys', 'bin', default='yosys'),
    'yosys_flags': [
        '-w .*synopsys.*translate_off.*',
    ],

    'cxx': VARS.get('c', 'cxx', default='c++'),
    'cxx_flags': [
        '-std=c++17',
        '-Wall',
        '-Wextra',
        '-Werror',
        '-I' + ROOT,
    ],
    'c_link_flags': [
    ],
    'ar': VARS.get('c', 'ar', default='ar'),
    'gen_version_bsv': ROOT + '/tools/site_cobble/gen_version_bsv.py',
    'rdl_script': ROOT + '/tools/site_cobble/rdl/__main__.py',
})

environment('bluesim_default', base = 'default', contents = {
    'bsc_flags': [
        '-keep-fires',
        '-check-assert',
    ],
})

environment('cxxrtl_default', base = 'default', contents = {
    'yosys_cmds': [
        'hierarchy -top $$top_module',
    ],
    'yosys_backend': 'cxxrtl -header',
    'cxx_flags': [
        '-Wno-array-bounds',
        '-Wno-shift-count-overflow',
    ],
})

# FPGA Family environments.
environment('ecp5', base = 'default', contents = {
    # Default synthesis commands for ECP5.
    'yosys_cmds': [
        'synth_ecp5 -top $$top_module',
    ],
    'yosys_backend': 'json', # nextpnr assumes JSON input.
    'nextpnr_ecp5': VARS.get('nextpnr', 'ecp5', default='nextpnr-ecp5'),
    'nextpnr_ecp5_flags': [
        '-q',
    ],
    'nextpnr_ecp5_pack': VARS.get('nextpnr', 'ecp5_pack', default='ecppack'),
})
environment('ice40', base = 'default', contents = {
    'yosys_cmds': [
        'synth_ice40 -top $$top_module',
    ],
    'yosys_backend': 'json', # nextpnr assumes JSON input.
    'nextpnr_ice40': VARS.get('nextpnr', 'ice40', default='nextpnr-ice40'),
    'nextpnr_ice40_flags': [
        '-q',
    ],
    'nextpnr_ice40_pack': VARS.get('nextpnr', 'ice40_pack', default='icepack'),
})

# Board environments/variants.
environment('ecp5_evn', base = 'ecp5', contents = {
    'nextpnr_ecp5_flags': [
        '--um5g-85k',
        '--package CABGA381',
    ],
    'nextpnr_constraints': ROOT + '/hdl/boards/ecp5_evn/ecp5_evn_basic.lpf',
})
environment('ulx3s', base = 'ecp5', contents = {
    'nextpnr_ecp5_flags': [
        '--85k',
        '--package CABGA381',
    ],
    'nextpnr_constraints': ROOT + '/hdl/boards/ulx3s/ulx3s_v20.lpf',
})
environment('icestick', base = 'ice40', contents = {
    'nextpnr_ice40_flags': [
        '--hx1k',
        '--package tq144',
    ],
    'nextpnr_constraints': ROOT + '/hdl/boards/icestick/icestick.pcf',
})

seed('//hdl')
seed('//hdl/boards/ecp5_evn')
seed('//hdl/boards/ulx3s')
seed('//hdl/boards/icestick')
seed('//hdl/examples')
seed('//hdl/interfaces')
seed('//hdl/interfaces/video')
seed('//hdl/test')
seed('//vnd/bluespec')
